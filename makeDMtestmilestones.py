import argparse
import csv
import sys
import time

from collections import namedtuple
from datetime import datetime
from io import StringIO

EXCEL_DATEFMT = "%m/%d/%Y %I:%M:%S %p"
LOCATION = "NCSA"  # for all tests
Milestone = namedtuple('Milestone',
                       ['code', 'name', 'description', 'date', 'successors'])

def get_milestones(ms_list, ms_dscr):
    milestones = []
    milestone_reader = csv.DictReader(ms_list)
    description_reader = csv.DictReader(ms_dscr)
    descriptions = {d['code']: d['description'] for d in description_reader}

    for k in milestone_reader:
        code = k['\ufefftask_code']
        if code == "Activity ID":
            continue
        dscr = descriptions[code] if code in descriptions else ""
        date = (datetime.strptime(k['end_date'], EXCEL_DATEFMT) if k['end_date']
                else datetime.strptime(k['start_date'], EXCEL_DATEFMT))
        milestones.append(
            Milestone(code, k['task_name'], dscr, date, k['succ_list'])
        )

    return milestones

def escape_latex(text):
    return text.strip().replace("#", "\#").replace("&", "and").replace("Test report: ", "")

def format_table(milestones, prefix="LDM"):
    output = StringIO()
    for ms in sorted(milestones, key=lambda x: x.date):
        if ms.code.startswith(prefix):
            output.write("{} & {} & NCSA & \\textbf{{{}}}: {} \\\\ \hline\n".format(
                escape_latex(ms.code),
                escape_latex(ms.date.strftime("%Y-%m-%d")),
                escape_latex(ms.name),
                escape_latex(ms.description)
            ))
    return output.getvalue()

def parse_args():
    parser = argparse.ArgumentParser(description='Prepare LDM-503-n milestone summaries')
    parser.add_argument('pmcs', help="Milestone listing extracted from PMCS.")
    parser.add_argument('dscr', help="Mapping of milestone ID to description.")
    parser.add_argument('outp', help="Output file.")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    with open(args.pmcs) as ms_list, open(args.dscr) as ms_dscr:
        milestones = get_milestones(ms_list, ms_dscr)
    with open(args.outp, 'w') as output:
        output.write("% Auto-generated by {} on {} - DO NOT EDIT\n\n".format(sys.argv[0], time.strftime("%c")))
        output.write(format_table(milestones))
